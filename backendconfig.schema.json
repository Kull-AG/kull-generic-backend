{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "type": "object",
  "properties": {
    "Entities": {
      "type": "object",
      "description": "A map, the keys are the URI's. A URI does not start with a slash",
      "title": "Entities / URI's",
      "patternProperties": {
        "^[^$_.].+$": {
          "$ref": "#/definitions/Entity"
        }
      }
    }
  },
  "required": [ "Entities" ],
  "definitions": {
    "EntityConfig": {
      "type": "object",
      "title": "Config on level Url/Entity",
      "description": "Use this to configure options on level Url. If the same config exists on level Method, the Method wins",
      "properties": {
        "Tag": {
          "type": "string",
          "description": "Value for the OpenApi-Tag. Use this to group your methods/entities"
        }
      }
    },
    "Entity": {
      "type": "object",
      "title": "Represents a URI / Entity",
      "description": "Use the HTTP Verb as property, or Config for options",
      "properties": {
        "Config": {
          "$ref": "#/definitions/EntityConfig"
        },
        "GET": {
          "$ref": "#/definitions/Method"
        },
        "PUT": {
          "$ref": "#/definitions/Method"
        },
        "POST": {
          "$ref": "#/definitions/Method"
        },
        "DELETE": {
          "$ref": "#/definitions/Method"
        },
        "PATCH": {
          "$ref": "#/definitions/Method"
        }
      }
    },
    "Method": {
      "oneOf": [
        {
          "type": "string",
          "description": "The name of the procedure to call"
        },
        {
          "type": "object",
          "description": "A config object for your Http Method",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "SP": {
                  "type": "string",
                  "description": "The name of the procedure to call"
                }
              }
            },
            {
              "$ref": "#/definitions/MethodBase"
            }
          ]
        }
      ]
    },
    "MethodBase": {
      "type": "object",
      "title": "HTTP Method to DB Mapping",
      "description": "Represents a HTTP Method that is mapped to a Stored Procedure",
      "properties": {
        "OperationId": {
          "type": "string",
          "description": "Value for the operationId. Must be unique amount the whole Api"
        },
        "OperationName": {
          "type": "string",
          "description": "Value for x-operation-name as used in some client code generators (eg, ng-openapi-gen). Use this for a unique name within a tag"
        },
        "Tag": {
          "type": "string",
          "description": "Value for the OpenApi-Tag, overwrites the Tag of the Entity. Use this to group your methods"
        },
        "ResultType": {
          "type": "string",
          "title": "The result Content Type",
          "description": "The content type to be return. Use only, if the Accept Header does not suit your needs",
          "enum": [ "File", "Json", "Xml" ]
        },
        "CommandTimeout": {
          "type": "integer",
          "title": "Timeout of Database Command",
          "description": "The timeout in seconds"
        },
        "IgnoreParameters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Parameters that you do not want in your API",
          "description": "Sometimes you might have parameters for your procedures that are not meant for the API. You can set a default value for those and ignore them using the IgnoreParameters"
        },
        "ExecuteParameters": {
          "type": "object",
          "additionalProperties": true,
          "title": "Parameters for execution of the Proc in case you have no metadata otherwise"
        }
      }
    }
  }
}
